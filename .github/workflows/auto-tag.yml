name: Deploy Merged PR

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**/*.md'
      - '.github/**'
      - 'docs/**'

jobs:
  test-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create tags
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Run tests
        run: go test -v ./...
      
      - name: Check for version bump
        id: check-version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Get the commit count since the last tag
          COMMIT_COUNT=$(git rev-list $LAST_TAG..HEAD --count)
          echo "Commits since last tag: $COMMIT_COUNT"
          
          if [ $COMMIT_COUNT -eq 0 ]; then
            echo "No new commits since last tag."
            echo "needs_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Determine version components
          VERSION_WITHOUT_V=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Determine type of version bump
          BREAKING_CHANGE=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -ci "BREAKING CHANGE")
          FEAT=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -ci "^feat:")

          if [ $BREAKING_CHANGE -gt 0 ]; then
            # Increment major version for breaking changes
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ $FEAT -gt 0 ]; then
            # Increment minor version for features
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Increment patch version for other changes
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "New tag: $NEW_TAG"

          # Output for the next step
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "needs_release=true" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        if: steps.check-version.outputs.needs_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG=${{ steps.check-version.outputs.new_tag }}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a $NEW_TAG -m "Automatic release $NEW_TAG"
          git push origin $NEW_TAG
          echo "Tag $NEW_TAG created and pushed successfully."
